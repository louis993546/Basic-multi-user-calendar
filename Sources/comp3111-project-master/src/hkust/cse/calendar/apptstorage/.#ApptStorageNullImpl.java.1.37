
package hkust.cse.calendar.apptstorage;

import hkust.cse.calendar.system.TimeMachine;
import hkust.cse.calendar.unit.Appt;
import hkust.cse.calendar.unit.TimeSpan;
import hkust.cse.calendar.unit.User;
import hkust.cse.calendar.userstorage.UserStorageController;
import hkust.cse.calendar.xmlfactory.ApptXmlFactory;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

//import sun.org.mozilla.javascript.internal.ast.Assignment; ???

public class ApptStorageNullImpl extends ApptStorage {
	
	public ApptStorageNullImpl(User user)
	{
		defaultUser = user;
		mAppts = ApptStorage.mUserToAppts.get(defaultUser.ID());
		mAssignedApptID = 0;
		apptXmlFactory = new ApptXmlFactory();

		//ApptStorage.mUserToAppts.put(defaultUser, mAppts);

		userStorage = UserStorageController.getInstance();
		loadApptFromXml(user, mAppts);
		mUserToAppts.put(defaultUser.ID(), mAppts);

		User[] users = userStorage.retrieveUsers();
		for(User u : users){
			if(u == defaultUser) continue;
			HashMap<TimeSpan, Appt> appts = new HashMap<TimeSpan, Appt> ();
			loadApptFromXml(u, appts);
			mUserToAppts.put(u.ID(), appts);
		}

		//ApptStorage.mUserToAppts.put(defaultUser, mAppts);

	}
	
	@Override
	public void SaveAppt(Appt appt) {
		// if it is an new appt, then set the id
//		if(appt.getID()==-1){
//			appt.setID(mAssignedApptID);
//			mAssignedApptID++;
//		}
		mAppts.put(appt.TimeSpan(),appt);
		// saveApptToXml(appt); // for xml
	}

	@Override
	public boolean checkOverlap(Appt appt,Appt entry){

		if(appt.TimeSpan().Overlap(entry.TimeSpan())){
			return true;
		}else{
			return false;
		}
	}
	
	@Override
	public boolean checkOverLaps(ArrayList<Appt> appts){

		for (Entry<TimeSpan, Appt> entry : mAppts.entrySet()) {
			for (Appt appt: appts) {
				// if it is an old appt, then don't check overlap
				if(appt.getID() == entry.getValue().getID()) break;
				// if overlap, then return true. otherwise, check next appt
				if(checkOverlap(appt,entry.getValue())){
					return true;
				}
				
			}	
		}
		return false;
	}
	

	@Override
	public Appt[] RetrieveAppts(TimeSpan d) {
		ArrayList<Appt> temp = new ArrayList<Appt>();

		for (Entry<TimeSpan, Appt> entry : mAppts.entrySet()) {
			// if overlap, then retrieve that appt
			if (d.Overlap(entry.getKey()))
				temp.add(entry.getValue());			
		}

		return temp.toArray(new Appt[temp.size()]);
	}
	
	@Override
	public Appt[] RetrieveAppts(User entity, TimeSpan time) {
		// TODO Auto-generated method stub
		//defaultUser = entity;
		return RetrieveAppts(time);
	}

	@Override
	public Appt[] RetrieveAppts(int joinApptID) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void UpdateAppt(Appt appt) {
		// must use the iterator because once you remove an appt, the date of appt.getValue() contain the deleted appt so that it will crash the system
		for(Iterator<Entry<TimeSpan, Appt>>it=mAppts.entrySet().iterator();it.hasNext();){
		     Entry<TimeSpan, Appt> entry = it.next();
		     Appt oldAppt = entry.getValue();
				if(oldAppt.getID() == appt.getID()){
					it.remove();
					mAppts.put(appt.TimeSpan(),appt);
				}	

		 }

	}

	@Override
	public void RemoveAppt(Appt appt) {
		// must use the iterator because once you remove an appt, the date of appt.getValue() contain the deleted appt so that it will crash the system
		// removeApptFromXml(appt); 
		mAppts.remove(appt.TimeSpan());
		for(Iterator<Entry<TimeSpan, Appt>>it = mAppts.entrySet().iterator(); it.hasNext();){
		     Entry<TimeSpan, Appt> entry = it.next();
				if(entry.getValue().getID() == appt.getID()){
					it.remove();
				}		
		 }
	}

	@Override
	public User getDefaultUser() {
		// TODO Auto-generated method stub
		return defaultUser;
	}

	/* begining of xml management functions*/
	@Override
	public void loadApptFromXml(User user, HashMap<TimeSpan,Appt> appts) {
		mAssignedApptID = apptXmlFactory.loadApptFromXml(ApptStorage.apptFile, appts, user.ID());
	}

	@Override
	public void saveApptToXml(Appt appt) {
		apptXmlFactory.saveApptToXml(ApptStorage.apptFile, appt, defaultUser.ID());
	}
	@Override
	public void removeApptFromXml(Appt appt) {
		apptXmlFactory.removeApptFromXml(ApptStorage.apptFile, appt, defaultUser.ID());
	}
	/* end of xml management functions*/
	
	@Override // added a method to get the assigned appt id
	public int getAssignedApptID(){
		return mAssignedApptID;
	}
	@Override
	public void setAssignedApptID(int id) {
		mAssignedApptID = id;
	}

	@Override
	public boolean checkApptsHaveLocation(String locationName) {
		// TODO Auto-generated method stub
		for(Appt mAppt : mAppts.values()) {
			if(mAppt.getLocation().getLocationName().equals(locationName)) {
				return true;
			}
		}
		return false;
	}
	
	@Override
	public boolean checkotherApptsHaveLocation(Appt appt, String locationName) {
		// TODO Auto-generated method stub
		for(Appt mAppt : mAppts.values()) {
			if(mAppt.getLocation().getLocationName().equals(locationName) && mAppt != appt) {
				return true;
			}
		}
		return false;
	}

	/* Tempory method to get all the appts for the admin appts
	 * Later will change it to get the specifi
	 * */
	
	@Override
	public Appt[] retrieveAllAppts(User user) {
		// TODO Auto-generated method stub
		ArrayList<Appt> appts = new ArrayList<Appt>();
		HashMap<TimeSpan, Appt> userAppt = ApptStorage.mUserToAppts.get(user);
		ArrayList<Integer> addedAppt = new ArrayList<Integer>();
		
		if(userAppt == null) {
			return null;
		}
		
		for(Appt appt : userAppt.values()) {
			boolean added = false;			
		
			for(int i = 0; i < addedAppt.size(); i++) {
				if(addedAppt.get(i).intValue() == appt.getID()) {
					added = true;
					break;
				}
			}
			
			if(!added) {
				addedAppt.add(new Integer(appt.getID()));
//				addedAppt.sort(null);
				appts.add(appt);
			}
		}
		/*
		appts.sort(new Comparator<Appt>() {
			@Override
			public int compare(Appt o1, Appt o2) {
				// TODO Auto-generated method stub
				return (int) (o1.getStartDate().StartTime().getTime() - o2.getStartDate().StartTime().getTime());
			}
		});
		*/
		return appts.toArray(new Appt[appts.size()]);
	}
	
	public boolean checkotherUsersTimespan(TimeSpan suggestedTimeSpan, User[] users){
		for(User user : users) {
			Appt[] apptsOfUser = RetrieveAppts(user, suggestedTimeSpan);
			if(apptsOfUser.length != 0) {
				return false;
			}
		}
		return true;
	}
	
	public TimeSpan[] getSuggestedTimeSpan(User[] users) {
		TimeMachine timeMachine = TimeMachine.getInstance();
		ArrayList<TimeSpan> suggestedTimeSpanList = new ArrayList<TimeSpan>();
		
		Timestamp suggestedStartTimestamp = timeMachine.getNowTimestamp();
		suggestedStartTimestamp.setMinutes((suggestedStartTimestamp.getMinutes() / 15) * 15 + 15);
		suggestedStartTimestamp.setSeconds(0);
		
		Timestamp suggestedEndTimestamp = timeMachine.getNowTimestamp();
		suggestedEndTimestamp.setMinutes((suggestedEndTimestamp.getMinutes() / 15) * 15 + 15 - 1);
		suggestedEndTimestamp.setSeconds(59);
		
		TimeSpan suggestedTimeSpan = new TimeSpan(suggestedStartTimestamp, suggestedEndTimestamp);
		
		if(suggestedTimeSpan.StartTime().getHours() > 17 || (suggestedTimeSpan.StartTime().getHours() == 5 && suggestedTimeSpan.StartTime().getMinutes() > 0)) {
			suggestedTimeSpan = TimeSpan.addTime(suggestedTimeSpan, TimeSpan.DAY, 1);
			
			suggestedTimeSpan.StartTime().setHours(8);
			suggestedTimeSpan.StartTime().setMinutes(0);
			suggestedTimeSpan.StartTime().setSeconds(0);
			
			suggestedTimeSpan.EndTime().setHours(8);
			suggestedTimeSpan.EndTime().setMinutes(59);
			suggestedTimeSpan.EndTime().setSeconds(59);
		}
		
		Appt[] appts = RetrieveAppts(defaultUser, suggestedTimeSpan);
		while(appts.length != 0) {
			suggestedTimeSpan = TimeSpan.addTime(suggestedTimeSpan, TimeSpan.MINUTE, 15);
		}
		
		int i = 0;
		while(true) {
			//TODO: Generate suggested timespan
			if(checkotherUsersTimespan(suggestedTimeSpan, users)) {
				suggestedTimeSpanList.add(suggestedTimeSpan);
				i++;
			}
			
			if(suggestedTimeSpan.StartTime().getHours() > 17 || (suggestedTimeSpan.StartTime().getHours() == 5 && suggestedTimeSpan.StartTime().getMinutes() > 0)) {
				suggestedTimeSpan = TimeSpan.addTime(suggestedTimeSpan, TimeSpan.DAY, 1);
				
				suggestedTimeSpan.StartTime().setHours(8);
				suggestedTimeSpan.StartTime().setMinutes(0);
				suggestedTimeSpan.StartTime().setSeconds(0);
				
				suggestedTimeSpan.EndTime().setHours(8);
				suggestedTimeSpan.EndTime().setMinutes(59);
				suggestedTimeSpan.EndTime().setSeconds(59);
			}
			
			appts = RetrieveAppts(defaultUser, suggestedTimeSpan);
			while(appts.length != 0) {
				suggestedTimeSpan = TimeSpan.addTime(suggestedTimeSpan, TimeSpan.MINUTE, 15);
			}
			
			if(i == 5) {
				break;
			}
		}
		
		return suggestedTimeSpanList.toArray(new TimeSpan[suggestedTimeSpanList.size()]);
	} 

}
